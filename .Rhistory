# Shiny
library(shiny)
library(bslib)
# Modeling
library(modeldata)
library(DataExplorer)
# Widgets
library(plotly)
# Core
library(tidyverse)
# Shiny
library(shiny)
library(bslib)
# Modeling
library(modeldata)
library(DataExplorer)
# Widgets
library(plotly)
# Core
library(tidyverse)
# Widgets
install.packages(plotly)
# Core
install.packages(tidyverse)
# Widgets
install.packages("plotly")
# Core
install.packages("tidyverse")
# Widgets
library(plotly)
# Core
library(tidyverse)
apt-get install libssl-dev/unstable
# Widgets
install.packages("plotly")
# Core
install.packages("tidyverse")
# Widgets
library(plotly)
# Core
library(tidyverse)
# LOAD DATASETS ----
utils::data("stackoverflow", "car_prices", "Sacramento", package = "modeldata")
data_list = list(
"StackOverflow" = stackoverflow,
"Car Prices"    = car_prices,
"Sacramento Housing" = Sacramento
)
# 1.0 USER INTERFACE ----
ui <- navbarPage(
title = "Data Explorer",
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Explore",
sidebarLayout(
sidebarPanel(
width = 3,
h1("Explore a Dataset"),
# Requires Reactive Programming Knowledge
# - Taught in Shiny Dashboards (DS4B 102-R)
shiny::selectInput(
inputId = "dataset_choice",
label   = "Data Connection",
choices = c("StackOverflow", "Car Prices", "Sacramento Housing")
),
# Requires Boostrap Knowledge
# - Taught in Shiny Developer with AWS (DS4B 202A-R)
hr(),
h3("Apps by Business Science"),
p("Go from beginner to building full-stack shiny apps."),
p("Learn Shiny Today!") %>%
a(
href = 'https://www.business-science.io/',
target = "_blank",
class = "btn btn-lg btn-primary"
) %>%
div(class = "text-center")
),
mainPanel(
h1("Correlation"),
plotlyOutput("corrplot", height = 700)
)
)
)
)
# 2.0 SERVER ----
server <- function(input, output) {
# REACTIVE PROGRAMMING  ----
# - Taught in Shiny Dashboards & Shiny Developer Courses
rv <- reactiveValues()
observe({
rv$data_set <- data_list %>% pluck(input$dataset_choice)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(rv$data_set)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# LOAD DATASETS ----
utils::data("stackoverflow", "car_prices", "Sacramento", package = "modeldata")
data_list = list(
"StackOverflow" = stackoverflow,
"Car Prices"    = car_prices,
"Sacramento Housing" = Sacramento
)
# 1.0 USER INTERFACE ----
ui <- navbarPage(
title = "Data Explorer",
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Explore",
sidebarLayout(
sidebarPanel(
width = 3,
h1("Explore a Dataset"),
# Requires Reactive Programming Knowledge
# - Taught in Shiny Dashboards (DS4B 102-R)
shiny::selectInput(
inputId = "dataset_choice",
label   = "Data Connection",
choices = c("StackOverflow", "Car Prices", "Sacramento Housing")
),
# Requires Boostrap Knowledge
# - Taught in Shiny Developer with AWS (DS4B 202A-R)
hr(),
h3("Apps by Business Science"),
p("Go from beginner to building full-stack shiny apps."),
p("Learn Shiny Today!") %>%
a(
href = 'https://www.business-science.io/',
target = "_blank",
class = "btn btn-lg btn-primary"
) %>%
div(class = "text-center")
),
mainPanel(
h1("Correlation"),
plotlyOutput("corrplot", height = 700)
)
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
# 1.0 USER INTERFACE ----
ui <- navbarPage(
title = "Data Explorer",
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Explore",
sidebarLayout(
sidebarPanel(
width = 3,
h1("Explore a Dataset"),
h2("DIE DIE DIE"),
# Requires Reactive Programming Knowledge
# - Taught in Shiny Dashboards (DS4B 102-R)
shiny::selectInput(
inputId = "dataset_choice",
label   = "Data Connection",
choices = c("StackOverflow", "Car Prices", "Sacramento Housing")
),
# Requires Boostrap Knowledge
# - Taught in Shiny Developer with AWS (DS4B 202A-R)
hr(),
h3("Apps by Business Science"),
p("Go from beginner to building full-stack shiny apps."),
p("Learn Shiny Today!") %>%
a(
href = 'https://www.business-science.io/',
target = "_blank",
class = "btn btn-lg btn-primary"
) %>%
div(class = "text-center")
),
mainPanel(
h1("Correlation"),
plotlyOutput("corrplot", height = 700)
)
)
)
)
# 2.0 SERVER ----
server <- function(input, output) {
# REACTIVE PROGRAMMING  ----
# - Taught in Shiny Dashboards & Shiny Developer Courses
rv <- reactiveValues()
observe({
rv$data_set <- data_list %>% pluck(input$dataset_choice)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(rv$data_set)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# 1.0 USER INTERFACE ----
ui <- fluidPage(theme = shinytheme("cyborg"),
navbarPage(
title = "Data Explorer",
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Explore",
sidebarLayout(
sidebarPanel(
width = 3,
h1("Explore a Dataset"),
h2("DIE DIE DIE"),
# Requires Reactive Programming Knowledge
# - Taught in Shiny Dashboards (DS4B 102-R)
shiny::selectInput(
inputId = "dataset_choice",
label   = "Data Connection",
choices = c("StackOverflow", "Car Prices", "Sacramento Housing")
),
# Requires Boostrap Knowledge
# - Taught in Shiny Developer with AWS (DS4B 202A-R)
hr(),
h3("Apps by Business Science"),
p("Go from beginner to building full-stack shiny apps."),
p("Learn Shiny Today!") %>%
a(
href = 'https://www.business-science.io/',
target = "_blank",
class = "btn btn-lg btn-primary"
) %>%
div(class = "text-center")
),
mainPanel(
h1("Correlation"),
plotlyOutput("corrplot", height = 700)
)
)
)
)
)
# 2.0 SERVER ----
server <- function(input, output) {
# REACTIVE PROGRAMMING  ----
# - Taught in Shiny Dashboards & Shiny Developer Courses
rv <- reactiveValues()
observe({
rv$data_set <- data_list %>% pluck(input$dataset_choice)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(rv$data_set)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Shiny
library(shiny)
library(bslib)
library(shinythemes)
# Modeling
library(modeldata)
library(DataExplorer)
# Widgets
library(plotly)
# Core
library(tidyverse)
# LOAD DATASETS ----
utils::data("stackoverflow", "car_prices", "Sacramento", package = "modeldata")
data_list = list(
"StackOverflow" = stackoverflow,
"Car Prices"    = car_prices,
"Sacramento Housing" = Sacramento
)
# 1.0 USER INTERFACE ----
ui <- fluidPage(theme = shinytheme("cyborg"),
navbarPage(
title = "Data Explorer",
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Explore",
sidebarLayout(
sidebarPanel(
width = 3,
h1("Explore a Dataset"),
h2("DIE DIE DIE"),
# Requires Reactive Programming Knowledge
# - Taught in Shiny Dashboards (DS4B 102-R)
shiny::selectInput(
inputId = "dataset_choice",
label   = "Data Connection",
choices = c("StackOverflow", "Car Prices", "Sacramento Housing")
),
# Requires Boostrap Knowledge
# - Taught in Shiny Developer with AWS (DS4B 202A-R)
hr(),
h3("Apps by Business Science"),
p("Go from beginner to building full-stack shiny apps."),
p("Learn Shiny Today!") %>%
a(
href = 'https://www.business-science.io/',
target = "_blank",
class = "btn btn-lg btn-primary"
) %>%
div(class = "text-center")
),
mainPanel(
h1("Correlation"),
plotlyOutput("corrplot", height = 700)
)
)
)
)
)
# 2.0 SERVER ----
server <- function(input, output) {
# REACTIVE PROGRAMMING  ----
# - Taught in Shiny Dashboards & Shiny Developer Courses
rv <- reactiveValues()
observe({
rv$data_set <- data_list %>% pluck(input$dataset_choice)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(rv$data_set)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('My_First_Shiny_App.R')
shiny::runApp('Play-golf')
runApp('Play-golf')
runApp('Play-golf')
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
head(weather)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv"), stringsAsFactors = TRUE )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
runApp('Play-golf')
View(weather)
View(weather)
ui <- fluidPage(theme = shinytheme("united"),
# Page header
headerPanel('Play Golf?'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
input <- transpose(df)
play <- "play"
df <- rbind(df, play)
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
setwd("~/Desktop/UGA/R_Shiny_Practice/Play-golf")
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
str(weather)
str(test)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
View(Output)
runApp()
runApp()
View(Output)
round(predict(model,test,type="prob"), 3)
predict(model,test)
datasetInput()
help(datasetInput())
print(Output)
